{"version":3,"sources":["components/Chat/Chat.js","components/Chat/Message/Message.js","components/Chat/Messages/Messages.js","components/Chat/ChatHeader/ChatHeader.js","components/Chat/Input/Input.js","components/Join/Join.js","App.js","index.js"],"names":["socket","Message","message","text","user","time","className","style","color","name","Messages","messages","map","i","key","ChatHeader","initialValues","validationSchema","Yup","required","min","max","matches","excludeEmptyString","Input","sendMessage","onSubmit","values","resetForm","placeholder","id","type","autoComplete","errorMsg","Chat","location","useState","setMessages","useEffect","io","queryString","parse","search","emit","error","alert","on","SignIn","history","useHistory","push","App","path","exact","component","Join","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80ec5537.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport Messages from './Messages/Messages';\r\nimport ChatHeader from './ChatHeader/ChatHeader';\r\nimport Input from './Input/Input';\r\nimport './Chat.css';\r\n\r\nlet socket;\r\nconst BASE_URL = (process.env.NODE_ENV !== 'development') ? '/' : '//localhost:5000/';\r\n\r\nconst Chat = ({ location }) => {\r\n  \r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket = io(BASE_URL);\r\n    const { name } = queryString.parse(location.search);\r\n    socket.emit('join', name, error => {\r\n      if (error) {\r\n        alert('Joining chat failed, please reconnect');\r\n      }\r\n    });\r\n    return () => {\r\n      socket.emit('disconnect');\r\n    }\r\n  }, [location.search]);\r\n\r\n  useEffect(() => {\r\n    socket.on('message', message => {\r\n      setMessages(messages => [...messages, message]);\r\n    });\r\n  }, []);\r\n\r\n  const sendMessage = message => {\r\n    if (message) {\r\n      socket.emit('sendMessage', message);\r\n    } else return;\r\n  }\r\n\r\n  return (\r\n    <main className=\"container\">\r\n      <div className=\"chat-container\">\r\n        <ChatHeader />\r\n        <Messages messages={messages} />\r\n        <Input sendMessage={sendMessage} />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\nexport default Chat;\r\n","import React from 'react';\r\nimport './Message.css';\r\n\r\nconst Message = ({ message: { text, user, time } }) => {\r\n  \r\n  return (\r\n    <div className=\"message-container\">\r\n      <p \r\n        style={{color:user.color}} \r\n        className={user.name === \"admin\" ? \"sent-text admin\" : \"sent-text\"}>\r\n          {time} - {user.name} - {text}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\nexport default Message;","import React from 'react';\r\nimport Message from '../Message/Message';\r\nimport './Messages.css';\r\n\r\nconst Messages = ({ messages }) => (\r\n  <main className=\"messages\">\r\n    {messages.map((message, i) => <Message key={i} message={message}/>)}\r\n  </main>\r\n);\r\n\r\nexport default Messages;","import React from 'react';\r\nimport './ChatHeader.css';\r\n\r\nconst ChatHeader = () => (\r\n  <header className=\"chat-header\">\r\n    <div className=\"logo-container\">\r\n      <div className=\"online-icon\" ></div>\r\n      <h3>Chat Application</h3>\r\n    </div>\r\n  </header>\r\n);\r\nexport default ChatHeader;","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport './Input.css';\r\n\r\nconst initialValues = {\r\n  message: ''\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  message: Yup.string()\r\n              .required('Required')\r\n              .min(5)\r\n              .max(22)\r\n              .matches(/^[a-zA-Z .!?\"-]+$/, { message: \"English only\", excludeEmptyString: true })\r\n});\r\n\r\nconst Input = ({ sendMessage }) => (\r\n\r\n  <Formik\r\n    initialValues= {initialValues}\r\n    onSubmit={(values, { resetForm }) => {\r\n      sendMessage(values.message);\r\n      resetForm();\r\n    }}\r\n    validationSchema={validationSchema}\r\n  >\r\n    <Form className=\"mesagges-form\">\r\n      <div className=\"form-control form-control-message\">\r\n        <Field\r\n          placeholder=\"Type a message...\"\r\n          name=\"message\"\r\n          id=\"message\"\r\n          className=\"input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <ErrorMessage name=\"message\">\r\n          {errorMsg => <div className=\"error\">{errorMsg}</div>}\r\n        </ErrorMessage>\r\n      </div>\r\n      <button className=\"send-button\" type=\"submit\">Send</button>\r\n    </Form>\r\n  </Formik>\r\n)\r\n\r\nexport default Input;","import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport './Join.css';\r\n\r\nconst initialValues = {\r\n  name: ''\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string()\r\n          .required('Required')\r\n          .min(6)\r\n          .max(10)\r\n          .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,10}$/, { message: \"Minimum of one lowercase, one uppercase and one digit, english only\", excludeEmptyString: true })\r\n});\r\n\r\nexport default function SignIn() {\r\n\r\n  const history = useHistory();\r\n\r\n  const onSubmit = values => {\r\n    history.push(`/chat?name=${values.name}`);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"join-container\">\r\n      <div className=\"form-container\">\r\n        <h1 className=\"heading\">Join Chat</h1>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={validationSchema}\r\n        >\r\n          <Form>\r\n            <div className=\"form-control\">\r\n              <Field\r\n                placeholder=\"Name between 6-10 characters\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                className=\"join-input\"\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n              />\r\n              <ErrorMessage name=\"name\" >\r\n                {errorMsg => <div className=\"error\">{errorMsg}</div>}\r\n              </ErrorMessage>\r\n            </div>\r\n            <button \r\n              className=\"button-join\" \r\n              type=\"submit\"\r\n            >\r\n              Next\r\n            </button>\r\n          </Form>\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Chat from './components/Chat/Chat';\r\nimport Join from './components/Join/Join';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" exact component={Join} />\r\n      <Route path=\"/chat\" component={Chat} />\r\n    </Router>\r\n  );\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}